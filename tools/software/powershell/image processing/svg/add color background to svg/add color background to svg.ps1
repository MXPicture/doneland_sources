<#

    
#>


function Add-SvgBackground
{
  <#
      .SYNOPSIS
      Takes path to a SVG file (created by KiCAD) and adds a solid-color background

      .DESCRIPTION
      This function was written to specifically process SVG image files generated by KiCAD
      It assumes that the second line contains the title and the third line contains a description, and that there is a "viewport" defined in the root node
      It then reads the viewport settings from the root element, and replaces the third line (originally holding the description)
      with a rectangle statement covering the entire viewport
      In addition, the title is changed to the pure file name (without extension)

      As-is, it works for KiCAD-generated SVGs only.
      If you'd like to extend it to any SVG, you would have to modify it. 

      .EXAMPLE
      Add-SvgBackground 
      Adds a white background to a SVG file, and saves it as a new file with filename suffix '_w'
      This assumes the SVG file path was copied to the clipboard prior to calling this function:
      (hold SHIFT, then right-click a SVG file in Windows Explorer, then choose "Copy as path" in the context menu) 

      .EXAMPLE
      Add-SvgBackground -Path c:\temp\test.svg -Suffix '' -BackgroundColor Green -OpenFile
      Adds a green background to color a SVG file, and updates it. No new file is created. The original file is changed.
      After the change, the file is opened in the default app.

      .EXAMPLE
      Add-SvgBackground -BackgroundColor FFAA76 -Suffix '_new'
      Adds a self-defined RGB background to a SVG file, and saves it as a new file with filename suffix '_new'
      (assuming the SVG file path was copied to the clipboard prior to calling this function)
    
      Describe what this call does
  #>


  # add a white background to a svg
  
  [CmdletBinding(DefaultParameterSetName='DefaultColors')]
  param
  (
    # path to existing SVG file
    # if not specified, default value is taken from clipboard
    [string]$Path = $(
    
      $temp = (Get-Clipboard).Trim('" ')
      $exists = Test-Path -Path $temp -PathType Leaf
      if (!$exists)
      {
        throw "You must specify the path to a SVG file or make sure a valid path was copied to the clipboard.`r`n'$temp' is no valid path or does not exist."
      }
      $temp
            
    ),
    
    # desired background color, can also be a hex RGB code
    [Parameter(ParameterSetName='StringColors', Position=1)]
    [string]$BackgroundColor = 'White',
    
    [Parameter(ParameterSetName='RGBColors', Position = 1)]
    [byte]$Red = 255,
    [Parameter(ParameterSetName='RGBColors', Position = 2)]
    [byte]$Green = 255,
    [Parameter(ParameterSetName='RGBColors', Position = 3)]
    [byte]$Blue = 255,
    
    # set suffix that is added to the new file
    # if the suffix is a blank string, the original file is overwritten
    [string]$Suffix = '_w',
    
    # when specified, new SVG file is opened by default app
    [switch]$OpenFile
    
    
  )

  Add-Type -AssemblyName System.Web
  
  $text = Get-Content -Path $Path
  
  # extract viewbox
  $pattern = 'viewBox="(\d{1,5}\.\d{1,5})\s(\d{1,5}\.\d{1,5})\s(\d{1,5}\.\d{1,5})\s(\d{1,5}\.\d{1,5})"'
  if ($text[0] -match $pattern)
  {
    $x = $matches[1]
    $y = $matches[2]
    $width = $matches[3]
    $height = $matches[4]
  }
  else
  {
    $x = $y = 0
    $width = $height = '100%'
  }
  
  # create background rectangle
  if ($PSCmdlet.ParameterSetName -eq 'RGBColors')
  {
    $rect = "<rect x=""$x"" y=""$y"" width=""$width"" height=""$height"" fill=""rgb($Red,$Green,$Blue)"" />"
  }
  else
  {
    # make sure a hex value is prepended with '#'
    if ($BackgroundColor.Length -eq 6 -or $BackgroundColor.Length -eq 8)
    {
        # if it is convertible...
        try
        {
          $null = [convert]::ToInt32($BackgroundColor,16)
          # ...then add the prefix:
          $BackgroundColor = '#' + $BackgroundColor
        }
        catch {}
    }
    $rect = "<rect x=""$x"" y=""$y"" width=""$width"" height=""$height"" fill=""$BackgroundColor"" />"    
  }
  
  $text[2] = $rect
  
  # adjust the file title
  $filename = [System.Io.Path]::GetFileNameWithoutExtension($Path)
  $filenameEncoded = [System.Web.HttpUtility]::HtmlEncode($filename)
  $text[1] = "<title>$filenameEncoded</title>"
  
  # save adjusted file
  $folder = Split-Path -Path $Path 
  $newFile = Join-Path -Path $folder -ChildPath "${filename}$($suffix.Trim()).svg"
  Set-Content -Path $newFile -Value $text -Encoding UTF8 -Force
  
  if ($OpenFile) { Invoke-Item -Path $newFile }
}
 